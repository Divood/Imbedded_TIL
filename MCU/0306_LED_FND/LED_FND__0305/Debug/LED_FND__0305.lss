
LED_FND__0305.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091c  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000840  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031e  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043e  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b7  00000000  00000000  00001b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001bd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e0       	ldi	r30, 0x0E	; 14
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	2a c0       	rjmp	.+84     	; 0x10a <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:

int main(void)
{
	int i;
	
	DDRC = 0xff;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
	DDRE = 0xff;
  bc:	82 b9       	out	0x02, r24	; 2
	
	/* Reset Tick */
	PORTC |= 0x80;
  be:	af 9a       	sbi	0x15, 7	; 21
	PORTC &= 0x7f;	
  c0:	af 98       	cbi	0x15, 7	; 21
	
	PORTC = 0b00001111;
  c2:	8f e0       	ldi	r24, 0x0F	; 15
  c4:	85 bb       	out	0x15, r24	; 21
	PORTC = 0x0b;
  c6:	9b e0       	ldi	r25, 0x0B	; 11
  c8:	95 bb       	out	0x15, r25	; 21
	PORTE = 0x80;
  ca:	90 e8       	ldi	r25, 0x80	; 128
  cc:	93 b9       	out	0x03, r25	; 3
	PORTC = 0x0f;
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	49 e0       	ldi	r20, 0x09	; 9
  d2:	51 e0       	ldi	r21, 0x01	; 1
	
	while (1)
    {	
		for(i = 0 ; i <= 8 ; i++)
		{
			PORTC = 0x08;
  d4:	28 e0       	ldi	r18, 0x08	; 8
			PORTE = led[i];
			PORTC = (PORTC | 0x04);
			
			PORTC = 0x09;
  d6:	99 e0       	ldi	r25, 0x09	; 9
  d8:	e0 e0       	ldi	r30, 0x00	; 0
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	a9 e0       	ldi	r26, 0x09	; 9
  de:	b1 e0       	ldi	r27, 0x01	; 1
	
	while (1)
    {	
		for(i = 0 ; i <= 8 ; i++)
		{
			PORTC = 0x08;
  e0:	25 bb       	out	0x15, r18	; 21
			PORTE = led[i];
  e2:	81 91       	ld	r24, Z+
  e4:	83 b9       	out	0x03, r24	; 3
			PORTC = (PORTC | 0x04);
  e6:	aa 9a       	sbi	0x15, 2	; 21
			
			PORTC = 0x09;
  e8:	95 bb       	out	0x15, r25	; 21
			PORTE = fnd[i];
  ea:	8d 91       	ld	r24, X+
  ec:	83 b9       	out	0x03, r24	; 3
			PORTC = (PORTC | 0x04);
  ee:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	3f ef       	ldi	r19, 0xFF	; 255
  f2:	69 e6       	ldi	r22, 0x69	; 105
  f4:	88 e1       	ldi	r24, 0x18	; 24
  f6:	31 50       	subi	r19, 0x01	; 1
  f8:	60 40       	sbci	r22, 0x00	; 0
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x3e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x48>
 100:	00 00       	nop
	PORTE = 0x80;
	PORTC = 0x0f;
	
	while (1)
    {	
		for(i = 0 ; i <= 8 ; i++)
 102:	e4 17       	cp	r30, r20
 104:	f5 07       	cpc	r31, r21
 106:	61 f7       	brne	.-40     	; 0xe0 <main+0x28>
 108:	e7 cf       	rjmp	.-50     	; 0xd8 <main+0x20>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
